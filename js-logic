// デバッグ用に利用可能なオブジェクトをコンソールに表示
console.log('THREE:', THREE);
console.log('THREE.FBXLoader:', THREE.FBXLoader);
console.log('THREE.STLLoader:', THREE.STLLoader);

// Three.jsオブジェクトの参照を確認（r128向け）
const FBXLoader = THREE.FBXLoader;
const STLLoader = THREE.STLLoader;
const EffectComposer = THREE.EffectComposer;
const RenderPass = THREE.RenderPass;
const ShaderPass = THREE.ShaderPass;
const UnrealBloomPass = THREE.UnrealBloomPass;

// script.js - パート1: 基本設定
const DEBUG_LEVEL = 2; // 0=無効, 1=エラーのみ, 2=警告も表示, 3=全て表示

// デバッグ関数
function log(level, message, data) {
  if (level <= DEBUG_LEVEL) {
    const prefix = level === 1 ? '❌ ERROR: ' : level === 2 ? '⚠️ WARNING: ' : '🔍 DEBUG: ';
    console.log(prefix + message, data !== undefined ? data : '');
  }
}

// ローディング画面を隠す
function hideLoading() {
  try {
    const loadingScreen = document.querySelector('.loading-screen');
    if (loadingScreen) {
      loadingScreen.classList.add('hidden');
      log(3, 'ローディング画面を非表示にしました');
    }
  } catch (error) {
    log(1, 'ローディング画面を隠す際にエラー', error);
  }
}

// タイムアウトで強制的にローディングを終了（30秒）
setTimeout(hideLoading, 30000);

// グローバル変数
let scene, camera, renderer, composer, ringMesh, floorMesh;
let raycaster, mouse;
let isRingHovered = false;
let isDragging = false;
let previousMousePosition = { x: 0, y: 0 };
let canvasElement;
let modelLoadingFailed = false; // モデルのロード失敗フラグ

// 定数定義をレスポンシブに
const FLOOR_HEIGHT = -30;
const FLOOR_OFFSET_Z = 30;

// デバイスサイズに応じた値を設定する関数
function getResponsiveValues() {
  const isMobile = window.innerWidth < 768;
  
  return {
    // モバイルではリングをより上方に配置、デスクトップではやや下に
    RING_HEIGHT: isMobile ? 10 : -5,
    // モバイルではカメラをより高く、やや近づけて
    CAMERA_HEIGHT: isMobile ? 45 : 35,
    CAMERA_DISTANCE: isMobile ? 85 : 90
  };
}

// レスポンシブ値の初期設定
let { RING_HEIGHT, CAMERA_HEIGHT, CAMERA_DISTANCE } = getResponsiveValues();

// グローバルエラーハンドラ
window.addEventListener('error', function(event) {
  log(1, `グローバルエラー: ${event.message} at ${event.filename}:${event.lineno}`);
  
  // WebGLエラーの場合、モデル読み込みに失敗したと見なす
  if (event.message && event.message.includes('WebGL')) {
    modelLoadingFailed = true;
  }
});

// script.js - パート2: 初期化とレンダラー設定
function init() {
  log(3, 'init() 開始');
  try {
    canvasElement = document.getElementById('canvas');
    if (!canvasElement) {
      throw new Error('canvas要素が見つかりません');
    }
    
    // シーンの作成
    scene = new THREE.Scene();
    
    // レスポンシブな値を取得
    const responsiveValues = getResponsiveValues();
    RING_HEIGHT = responsiveValues.RING_HEIGHT;
    CAMERA_HEIGHT = responsiveValues.CAMERA_HEIGHT;
    CAMERA_DISTANCE = responsiveValues.CAMERA_DISTANCE;
    
    // カメラの設定
    camera = new THREE.PerspectiveCamera(35, window.innerWidth/window.innerHeight, 0.1, 2000);
    camera.position.set(0, CAMERA_HEIGHT, CAMERA_DISTANCE);
    camera.lookAt(0, RING_HEIGHT, 0);
    
    // レンダラーの設定
    try {
      renderer = new THREE.WebGLRenderer({ 
        antialias: true,
        powerPreference: "high-performance",
        alpha: true // 透明背景を許可
      });
    } catch (error) {
      log(1, 'WebGLRenderer作成失敗', error);
      return;
    }
    
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    
    // レンダラーのカラースペース設定（r128向け）
    if (THREE.LinearEncoding !== undefined) {
      renderer.outputEncoding = THREE.sRGBEncoding;
    } else if (renderer.outputColorSpace !== undefined) {
      renderer.outputColorSpace = THREE.SRGBColorSpace;
    }
    
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.toneMappingExposure = 0.9;
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    canvasElement.appendChild(renderer.domElement);
    
    // レイキャスター
    raycaster = new THREE.Raycaster();
    mouse = new THREE.Vector2();
    
    // エフェクトコンポーザー
    try {
      console.log('EffectComposer:', typeof THREE.EffectComposer);
      console.log('RenderPass:', typeof THREE.RenderPass);
      console.log('UnrealBloomPass:', typeof THREE.UnrealBloomPass);

      composer = new THREE.EffectComposer(renderer);
      const renderPass = new THREE.RenderPass(scene, camera);
      composer.addPass(renderPass);
      
      const bloom = new THREE.UnrealBloomPass(
        new THREE.Vector2(window.innerWidth, window.innerHeight),
        0.15, 0.8, 0.35
      );
      composer.addPass(bloom);
    } catch (error) {
      log(1, 'エフェクトコンポーザー作成失敗', error);
      console.error(error);
      // フォールバック
      composer = {
        render: function() { 
          if (renderer) renderer.render(scene, camera); 
        },
        setSize: function(w, h) { /* 何もしない */ }
      };
    }
    
    // テクスチャローダー
    const textureLoader = new THREE.TextureLoader();
    
    // パノラマのロード
    loadRoomBackground(textureLoader);
    
    // 木目テクスチャのロード
    textureLoader.load(
      'https://threejs.org/examples/textures/hardwood2_diffuse.jpg',
      function(texture) {
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
        texture.repeat.set(4, 4);
        
        createWoodenFloor(texture);
        setupLighting();
        
        // カラースウォッチの作成（モデル読み込み前に作成）
        createColorSwatches();
        
        // FBXロード試行（フォールバック仕組み付き）
        tryLoadModelWithFallback();
      },
      undefined,
      function(error) {
        log(1, '木目テクスチャロード失敗', error);
        // フォールバック（テクスチャなしで続行）
        createWoodenFloor();
        setupLighting();
        createColorSwatches();
        tryLoadModelWithFallback();
      }
    );
    
    // イベントリスナーの設定
    setupEventListeners();
    
  } catch (error) {
    log(1, 'init()でエラー発生', error);
    hideLoading();
  }
}

// script.js - パート3: 背景、照明、床の設定
function loadRoomBackground(textureLoader) {
  try {
    textureLoader.load(
      'https://images.unsplash.com/photo-1600210492493-0946911123ea?q=80&w=2874&auto=format&fit=crop&ixlib=rb-4.0.3',
      function(texture) {
        try {
          const geometry = new THREE.SphereGeometry(500, 60, 40);
          geometry.scale(-1, 1, 1);
          
          const material = new THREE.MeshBasicMaterial({
            map: texture,
            side: THREE.DoubleSide
          });
          
          const mesh = new THREE.Mesh(geometry, material);
          scene.add(mesh);
          
          // 環境マップとしても設定
          scene.environment = texture;
        } catch (error) {
          log(1, '背景パノラマセットアップエラー', error);
        }
      },
      undefined,
      function(error) {
        log(1, '背景パノラマロード失敗', error);
        scene.background = new THREE.Color(0xf6f6f6);
      }
    );
  } catch (error) {
    log(1, '背景パノラマロードエラー', error);
    scene.background = new THREE.Color(0xf6f6f6);
  }
}

function setupLighting() {
  try {
    // 環境光
    const ambientLight = new THREE.AmbientLight(0xf5f2eb, 0.5);
    scene.add(ambientLight);
    
    // メインライト
    const mainLight = new THREE.DirectionalLight(0xffffff, 0.8);
    mainLight.position.set(50, 80, 50);
    mainLight.castShadow = true;
    
    // シャドウマップ設定
    mainLight.shadow.mapSize.width = 1024;
    mainLight.shadow.mapSize.height = 1024;
    mainLight.shadow.camera.near = 0.5;
    mainLight.shadow.camera.far = 500;
    mainLight.shadow.camera.left = -100;
    mainLight.shadow.camera.right = 100;
    mainLight.shadow.camera.top = 100;
    mainLight.shadow.camera.bottom = -100;
    mainLight.shadow.bias = -0.001;
    mainLight.shadow.normalBias = 0.02;
    scene.add(mainLight);
    
    // フィルライト
    const fillLight = new THREE.DirectionalLight(0xf5f2eb, 0.4);
    fillLight.position.set(-80, 20, 60);
    scene.add(fillLight);
    
    // バックライト
    const backLight = new THREE.DirectionalLight(0xf8f8ff, 0.2);
    backLight.position.set(0, 40, -80);
    scene.add(backLight);
    
    // スポットライト
    const spotLight = new THREE.SpotLight(0xffffff, 0.8);
    spotLight.position.set(0, 100, 0);
    spotLight.angle = Math.PI / 6;
    spotLight.penumbra = 0.2;
    spotLight.decay = 2;
    spotLight.distance = 200;
    spotLight.castShadow = true;
    scene.add(spotLight);
  } catch (error) {
    log(1, '照明セットアップエラー', error);
  }
}

function createWoodenFloor(texture) {
  try {
    const floorGeometry = new THREE.PlaneGeometry(300, 300);
    const floorMaterial = new THREE.MeshStandardMaterial({
      map: texture || null,
      color: texture ? 0xffffff : 0xd2b48c,
      metalness: 0.1,
      roughness: 0.8,
    });
    floorMesh = new THREE.Mesh(floorGeometry, floorMaterial);
    floorMesh.rotation.x = -Math.PI / 2;
    floorMesh.position.set(0, FLOOR_HEIGHT, FLOOR_OFFSET_Z);
    floorMesh.receiveShadow = true;
    scene.add(floorMesh);
  } catch (error) {
    log(1, '木製床作成エラー', error);
  }
}

// script.js - パート4: モデルローダーとフォールバック機能 (視点調整版)
// モデル読み込み状態を管理するフラグを追加
let modelLoaded = false;

// FBXファイル/STLファイル読み込みを試行し、必要に応じてフォールバックする
function tryLoadModelWithFallback() {
  try {
    // モデルの初期ロードをリセット
    modelLoaded = false;
    modelLoadingFailed = false;
    
    // まずFBXモデルを試す (rawのURLを使用)
    loadFBXModel('https://raw.githubusercontent.com/asachi/lieun/main/TWRINGfbx.fbx');
    
    // エラーをキャッチして一定時間後にSTLモデルへのフォールバックを確認
    setTimeout(function() {
      if (!modelLoaded && ((document.querySelector('.loading-screen') && 
          !document.querySelector('.loading-screen.hidden')) || modelLoadingFailed)) {
        log(2, "FBXロードがタイムアウトまたは失敗、STLモデルを読み込みます");
        loadSTLModel('https://raw.githubusercontent.com/asachi/lieun/main/ring_data_0509.stl');
      }
    }, 8000); // 8秒後にチェック
  } catch (error) {
    log(1, "モデル読み込み処理エラー", error);
    if (!modelLoaded) {
      loadSTLModel('https://raw.githubusercontent.com/asachi/lieun/main/ring_data_0509.stl');
    }
  }
}

// FBXファイルを読み込む関数 (テクスチャ対応・サイズ調整版)
function loadFBXModel(url) {
  log(2, 'FBXモデルロード開始: ' + url);
  
  const loadingScreen = document.querySelector('.loading-screen');
  
  try {
    console.log('FBXLoaderの型:', typeof THREE.FBXLoader);
    console.log('fflate available:', typeof fflate !== 'undefined');
    console.log('Zlib.Inflate available:', typeof window.Zlib?.Inflate !== 'undefined');
    
    // FBXLoader が利用可能かチェック
    if (typeof THREE.FBXLoader !== 'function') {
      throw new Error('FBXLoaderが見つかりません。必要なライブラリを追加してください。');
    }
    
    // fflateのチェック
    if (typeof fflate === 'undefined') {
      throw new Error('fflate ライブラリが見つかりません。FBXの読み込みには必須です。');
    }
    
    // ローダーのインスタンスを作成
    const loader = new THREE.FBXLoader();
    console.log('FBXLoader インスタンス作成成功');
    
    loader.setCrossOrigin('anonymous');
    
    // モデルのURLを設定
    const modelUrl = url;
    
    loader.load(
      modelUrl,
      function(object) {
        // すでに別のモデルがロード完了している場合は何もしない
        if (modelLoaded) {
          log(2, 'FBXモデルロード完了したが、既に別のモデルが表示されているため無視します');
          return;
        }
        
        log(2, 'FBXモデルロード完了');
        try {
          // モデル読み込み成功フラグを設定
          modelLoaded = true;
          
          // モデルのデバッグ情報（詳細表示）
          console.log("FBXモデルタイプ:", object.type);
          console.log("FBXモデル子要素数:", object.children ? object.children.length : 0);
          
          // 古いリングを削除
          if (ringMesh) {
            scene.remove(ringMesh);
          }
          
          // STLと同じサイズに設定（固定サイズ）
          object.scale.set(0.8, 0.8, 0.8);
          object.position.set(0, RING_HEIGHT, 0);
          
          // リングが水平になるように回転を修正
          object.rotation.set(Math.PI/2, Math.PI, 0);
          
          // カメラ位置は元のまま維持
          camera.position.set(0, CAMERA_HEIGHT, CAMERA_DISTANCE);
          camera.lookAt(0, RING_HEIGHT, 0);
          
          // テクスチャを保持するため元のマテリアルを使用し、必要な設定だけ追加
          object.traverse(function(child) {
            if (child.isMesh) {
              // 元のマテリアルを保持
              const origMaterial = child.material;
              
              // マテリアルが配列の場合
              if (Array.isArray(origMaterial)) {
                origMaterial.forEach(function(mat) {
                  // テクスチャ処理
                  if (mat.map) {
                    mat.map.encoding = THREE.sRGBEncoding || THREE.SRGBColorSpace;
                    mat.map.needsUpdate = true;
                  }
                  
                  // 必要な設定のみ追加
                  mat.envMapIntensity = 1.0;
                  mat.needsUpdate = true;
                });
              } 
              // 単一マテリアルの場合
              else if (origMaterial) {
                // テクスチャがある場合は保持
                if (origMaterial.map) {
                  origMaterial.map.encoding = THREE.sRGBEncoding || THREE.SRGBColorSpace;
                  origMaterial.map.needsUpdate = true;
                  origMaterial.envMapIntensity = 1.0;
                  origMaterial.needsUpdate = true;
                }
                // テクスチャがない場合は標準マテリアルを適用
                else {
                  child.material = new THREE.MeshStandardMaterial({
                    color: origMaterial.color || 0xffffff,
                    metalness: 0.7,
                    roughness: 0.3,
                    envMapIntensity: 1.0
                  });
                }
              }
              
              // 影の設定
              child.castShadow = true;
              child.receiveShadow = true;
            }
          });
          
          // リングメッシュとして参照
          ringMesh = object;
          scene.add(object);
          
          // アニメーション（モデルを少し回転させる）
          gsap.from(object.rotation, {
            y: object.rotation.y + Math.PI*2,
            duration: 1.5,
            ease: 'expo.out'
          });
          
          // ローディング画面を非表示
          if (loadingScreen) {
            loadingScreen.classList.add('hidden');
          }
          
          // 念のためシーンを強制更新
          renderer.render(scene, camera);
        } catch (error) {
          log(1, 'FBXモデル処理エラー', error);
          modelLoadingFailed = true;
          modelLoaded = false; // モデルロードを失敗とマーク
          hideLoading();
        }
      },
      // 進捗コールバック
      function(xhr) {
        if (xhr.total > 0) {
          const percent = xhr.loaded / xhr.total * 100;
          log(3, `FBXロード進捗: ${percent.toFixed(1)}%`);
        }
      },
      // エラーコールバック
      function(error) {
        log(1, 'FBXモデルロード失敗', error);
        console.error(error);
        modelLoadingFailed = true;
        hideLoading();
      }
    );
  } catch (error) {
    log(1, 'FBXモデルロード処理エラー', error);
    console.error(error);
    modelLoadingFailed = true;
    hideLoading();
  }
}

// STLモデルを読み込む関数
function loadSTLModel(url) {
  log(2, 'STLモデルロード開始: ' + url);
  
  const loadingScreen = document.querySelector('.loading-screen');
  
  try {
    // すでに別のモデルがロード完了している場合は何もしない
    if (modelLoaded) {
      log(2, 'STLモデルロードをスキップ: 既に別のモデルが表示されています');
      return;
    }
    
    console.log('STLLoaderの型:', typeof THREE.STLLoader);
    
    // STLLoader が利用可能かチェック
    if (typeof THREE.STLLoader !== 'function') {
      throw new Error('STLLoaderが見つかりません');
    }
    
    // ローダーの初期化
    const loader = new THREE.STLLoader();
    console.log('STLLoader インスタンス作成成功');
    
    loader.setCrossOrigin('anonymous');
    
    // モデルのURLを設定
    const modelUrl = url;
    
    loader.load(
      modelUrl,
      function(geometry) {
        // すでに別のモデルがロード完了している場合は何もしない
        if (modelLoaded) {
          log(2, 'STLモデルロード完了したが、既に別のモデルが表示されているため無視します');
          return;
        }
        
        log(2, 'STLモデルロード完了');
        try {
          // モデル読み込み成功フラグを設定
          modelLoaded = true;
          
          geometry.center();
          geometry.computeVertexNormals();
          
          // マテリアル
          const material = new THREE.MeshStandardMaterial({
            color: 0xffffff,
            metalness: 0.7,
            roughness: 0.2,
            envMapIntensity: 2.0
          });
          
          // 古いメッシュを削除
          if (ringMesh) {
            scene.remove(ringMesh);
          }
          
          // 新しいメッシュを作成
          ringMesh = new THREE.Mesh(geometry, material);
          ringMesh.castShadow = true;
          ringMesh.receiveShadow = true;
          ringMesh.scale.set(0.8, 0.8, 0.8);
          ringMesh.position.y = RING_HEIGHT;
          
          // リングが水平になるように回転
          ringMesh.rotation.set(Math.PI/2, 0, 0);
          
          // カメラ位置は元のまま
          camera.position.set(0, CAMERA_HEIGHT, CAMERA_DISTANCE);
          camera.lookAt(0, RING_HEIGHT, 0);
          
          scene.add(ringMesh);
          
          // アニメーション
          gsap.from(ringMesh.rotation, { 
            y: Math.PI*2, 
            duration: 2.0, 
            ease: 'expo.out' 
          });
          
          // ローディング画面を非表示
          if (loadingScreen) {
            loadingScreen.classList.add('hidden');
          }
        } catch (error) {
          log(1, 'STLモデル処理エラー', error);
          modelLoaded = false; // モデルロードを失敗とマーク
          hideLoading();
          // 最終フォールバックとしてプレースホルダーを表示
          createPlaceholderRing();
        }
      },
      function(xhr) {
        if (xhr.total > 0) {
          const percent = xhr.loaded / xhr.total * 100;
          log(3, `STLロード進捗: ${percent.toFixed(1)}%`);
        }
      },
      function(error) {
        log(1, 'STLモデルロード失敗', error);
        console.error(error);
        hideLoading();
        // 最終フォールバックとしてプレースホルダーを表示
        createPlaceholderRing();
      }
    );
  } catch (error) {
    log(1, 'STLモデルロード処理エラー', error);
    console.error(error);
    hideLoading();
    // 最終フォールバックとしてプレースホルダーを表示
    createPlaceholderRing();
  }
}

// フォールバック用のプレースホルダーリング
function createPlaceholderRing() {
  log(2, 'プレースホルダーリング作成開始');
  try {
    // すでに別のモデルがロード完了している場合は何もしない
    if (modelLoaded) {
      log(2, 'プレースホルダーリング作成をスキップ: 既に別のモデルが表示されています');
      return;
    }
    
    // モデル読み込み成功フラグを設定
    modelLoaded = true;
    
    const placeholderGeo = new THREE.TorusGeometry(40, 6, 64, 100);
    const placeholderMat = new THREE.MeshStandardMaterial({ 
      color: 0xffffff,
      metalness: 0.7, 
      roughness: 0.2,
      envMapIntensity: 1.5
    });
    ringMesh = new THREE.Mesh(placeholderGeo, placeholderMat);
    ringMesh.castShadow = true;
    ringMesh.receiveShadow = true;
    ringMesh.position.y = RING_HEIGHT;
    
    // プレースホルダーリングも水平に表示
    ringMesh.rotation.set(Math.PI/2, 0, 0);
    
    scene.add(ringMesh);
    log(3, 'プレースホルダーリング作成完了');
    
    // ローディング画面を非表示（エラー回復時）
    hideLoading();
  } catch (error) {
    log(1, 'プレースホルダーリング作成エラー', error);
  }
}

// script.js - パート5: カラースウォッチとイベントリスナー
function createColorSwatches() {
  try {
    const colors = [
      '#888888', // シルバー
      '#ffffff', // ホワイト
      '#FFD700', // ゴールド
      '#1d1d1d', // スペースグレイ
      '#ffb6c1'  // ピンク
    ];
    
    const swatches = document.getElementById('swatches');
    if (!swatches) {
      throw new Error('swatches要素が見つかりません');
    }
    
    // 既存の子要素をクリア
    while (swatches.firstChild) {
      swatches.removeChild(swatches.firstChild);
    }
    
    colors.forEach((c, i) => {
      const btn = document.createElement('button');
      btn.style.background = c;
      if (c === '#1d1d1d') {
        btn.style.boxShadow = 'inset 0 0 0 1px rgba(255,255,255,0.2)';
      }
      
      // ホワイトをデフォルトで選択
      if (i === 1) btn.classList.add('selected');
      
      const changeColor = function(event) {
        if (event.type === 'touchstart') {
          event.preventDefault();
        }
        
        // 選択状態の更新
        document.querySelectorAll('#swatches button').forEach(b => b.classList.remove('selected'));
        btn.classList.add('selected');
        
        try {
          const col = new THREE.Color(c);
          
          if (ringMesh) {
            // FBXモデルの場合、階層を走査
            if (ringMesh.traverse) {
              ringMesh.traverse(function(child) {
                if (child.isMesh) {
                  
                  // マテリアル設定
                  let metalness = 0.9, roughness = 0.1;
                  if (c === '#FFD700') { // ゴールド
                    metalness = 0.95; roughness = 0.05;
                  } else if (c === '#ffffff') { // ホワイト
                    metalness = 0.7; roughness = 0.2;
                  } else if (c === '#1d1d1d') { // スペースグレイ
                    metalness = 0.8; roughness = 0.15;
                  } else if (c === '#ffb6c1') { // ピンク
                    metalness = 0.85; roughness = 0.1;
                  }
                  
                  // 配列のマテリアルを処理
                  if (Array.isArray(child.material)) {
                    child.material.forEach(function(mat) {
                      if (mat.color) {
                        // 色を変更
                        gsap.to(mat.color, {
                          r: col.r, g: col.g, b: col.b,
                          duration: 0.6, ease: 'power2.out'
                        });
                        
                        if (mat.metalness !== undefined) {
                          gsap.to(mat, {
                            metalness, roughness,
                            duration: 0.6, ease: 'power2.out'
                          });
                        }
                      }
                    });
                  } 
                  // 単一マテリアルの場合
                  else if (child.material.color) {
                    gsap.to(child.material.color, {
                      r: col.r, g: col.g, b: col.b,
                      duration: 0.6, ease: 'power2.out'
                    });
                    
                    if (child.material.metalness !== undefined) {
                      gsap.to(child.material, {
                        metalness, roughness,
                        duration: 0.6, ease: 'power2.out'
                      });
                    }
                  }
                }
              });
            }
            // 単一メッシュの場合（STLなど）
            else if (ringMesh.material && ringMesh.material.color) {
              gsap.to(ringMesh.material.color, {
                r: col.r, g: col.g, b: col.b,
                duration: 0.6, ease: 'power2.out'
              });
              
              let metalness = 0.9, roughness = 0.1;
              if (c === '#FFD700') {
                metalness = 0.95; roughness = 0.05;
              } else if (c === '#ffffff') {
                metalness = 0.7; roughness = 0.2;
              } else if (c === '#1d1d1d') {
                metalness = 0.8; roughness = 0.15;
              } else if (c === '#ffb6c1') {
                metalness = 0.85; roughness = 0.1;
              }
              
              gsap.to(ringMesh.material, {
                metalness, roughness,
                duration: 0.6, ease: 'power2.out'
              });
            }
          }
        } catch (error) {
          log(1, '色変更エラー', error);
        }
      };
      
      // イベントリスナー追加
      btn.addEventListener('click', changeColor);
      btn.addEventListener('touchstart', changeColor, { passive: false });
      
      swatches.appendChild(btn);
    });
  } catch (error) {
    log(1, 'カラースウォッチ作成エラー', error);
  }
}

function setupEventListeners() {
  try {
    // マウス移動イベント
    document.addEventListener('mousemove', onMouseMove);
    
    // マウスイベント
    document.addEventListener('mousedown', onMouseDown);
    document.addEventListener('mouseup', onMouseUp);
    document.addEventListener('mouseleave', onMouseUp);
    
    // ホイールズーム
    document.addEventListener('wheel', onMouseWheel, { passive: false });
    
    // タッチイベント
    document.addEventListener('touchstart', onTouchStart, { passive: false });
    document.addEventListener('touchmove', onTouchMove, { passive: false });
    document.addEventListener('touchend', onTouchEnd);
    
    // リセットボタン
    const resetButton = document.getElementById('reset-view');
    if (resetButton) {
      const resetHandler = function(e) {
        if (e.type === 'touchstart') e.preventDefault();
        
        // カメラ位置は元の斜め上の位置に戻す
        gsap.to(camera.position, {
          x: 0, 
          y: CAMERA_HEIGHT, 
          z: CAMERA_DISTANCE,
          duration: 1.0, 
          ease: 'power2.out',
          onUpdate: function() {
            camera.lookAt(0, RING_HEIGHT, 0);
          }
        });
        
        if (ringMesh) {
          // リングが水平になる回転に設定
          const initialRotation = ringMesh.traverse ? 
            { x: Math.PI/2, y: Math.PI, z: 0 } :  // FBXモデル
            { x: Math.PI/2, y: 0, z: 0 };         // STLモデル
            
          gsap.to(ringMesh.rotation, {
            x: initialRotation.x,
            y: initialRotation.y,
            z: initialRotation.z,
            duration: 1.0, 
            ease: 'power2.out'
          });
        }
      };
      resetButton.addEventListener('click', resetHandler);
      resetButton.addEventListener('touchstart', resetHandler, { passive: false });
    }
    
    // リサイズハンドラ
    window.addEventListener('resize', onResize);
  } catch (error) {
    log(1, 'イベントリスナーセットアップエラー', error);
  }
}

// script.js - パート6: マウス/タッチ操作 (回転修正・ピンチ強化版)
function onMouseMove(event) {
  try {
    // マウス座標の正規化
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
    
    checkRingHover();
    
    // ドラッグ中の回転処理
    if (isDragging && ringMesh) {
      const deltaX = event.clientX - previousMousePosition.x;
      const deltaY = event.clientY - previousMousePosition.y;
      
      const rotationSpeed = 0.01;
      
      // 回転を適用 (マイナス記号を外して正しい方向に回転するよう修正)
      if (ringMesh.traverse) {
        // FBXモデルの場合、回転軸を調整
        ringMesh.rotation.z += deltaX * rotationSpeed; // マイナス記号を外す
        ringMesh.rotation.x += deltaY * rotationSpeed; // 上下は同じ
      } else {
        // STLモデルの場合
        ringMesh.rotation.y += deltaX * rotationSpeed; // マイナス記号を外す
        ringMesh.rotation.x += deltaY * rotationSpeed; // 上下は同じ
      }
      
      // マウス位置を更新
      previousMousePosition.x = event.clientX;
      previousMousePosition.y = event.clientY;
    }
  } catch (error) {
    log(1, 'マウス移動処理エラー', error);
  }
}

// マウスホイールでのズーム
function onMouseWheel(event) {
  event.preventDefault();
  
  // ホイールの方向を判定（ブラウザ互換性対応）
  const delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail || -event.deltaY)));
  const zoomSpeed = 10;
  
  // カメラ位置の更新
  gsap.to(camera.position, {
    z: Math.max(50, Math.min(200, camera.position.z - delta * zoomSpeed)),
    duration: 0.2,
    ease: 'power1.out'
  });
}

function checkRingHover() {
  try {
    if (!ringMesh) return;
    
    raycaster.setFromCamera(mouse, camera);
    
    // FBXモデルの場合、子要素を含めてインターセクト検出
    let intersects = [];
    if (ringMesh.traverse) {
      const meshes = [];
      ringMesh.traverse(function(child) {
        if (child.isMesh) {
          meshes.push(child);
        }
      });
      intersects = raycaster.intersectObjects(meshes);
    } else {
      intersects = raycaster.intersectObject(ringMesh);
    }
    
    if (intersects.length > 0) {
      if (!isRingHovered) {
        isRingHovered = true;
        document.body.style.cursor = 'grab';
        canvasElement.classList.add('can-rotate');
      }
    } else {
      if (isRingHovered && !isDragging) {
        isRingHovered = false;
        document.body.style.cursor = 'default';
        canvasElement.classList.remove('can-rotate');
      }
    }
  } catch (error) {
    log(1, 'リングホバーチェックエラー', error);
  }
}

function onMouseDown(event) {
  try {
    if (!ringMesh) return;
    if (event.button !== 0) return;
    
    raycaster.setFromCamera(mouse, camera);
    
    // FBXモデルの場合、子要素を含めてインターセクト検出
    let intersects = [];
    if (ringMesh.traverse) {
      const meshes = [];
      ringMesh.traverse(function(child) {
        if (child.isMesh) {
          meshes.push(child);
        }
      });
      intersects = raycaster.intersectObjects(meshes);
    } else {
      intersects = raycaster.intersectObject(ringMesh);
    }
    
    if (intersects.length > 0) {
      isDragging = true;
      canvasElement.classList.add('rotating');
      document.body.style.cursor = 'grabbing';
      
      previousMousePosition.x = event.clientX;
      previousMousePosition.y = event.clientY;
      
      event.preventDefault();
    }
  } catch (error) {
    log(1, 'マウスダウン処理エラー', error);
  }
}

function onMouseUp() {
  try {
    if (isDragging) {
      isDragging = false;
      canvasElement.classList.remove('rotating');
      document.body.style.cursor = isRingHovered ? 'grab' : 'default';
    }
  } catch (error) {
    log(1, 'マウスアップ処理エラー', error);
  }
}

// ピンチズーム用の変数
let initialPinchDistance = 0;

// タッチ開始時の処理
function onTouchStart(event) {
  try {
    if (!ringMesh) return;
    
    if (event.target.closest('.controls-container')) {
      return; // コントロールエリアのタッチはスキップ
    }
    
    // 複数のタッチがある場合（ピンチ操作）
    if (event.touches.length === 2) {
      // 2本指のピンチ操作の初期距離を記録
      const dx = event.touches[0].clientX - event.touches[1].clientX;
      const dy = event.touches[0].clientY - event.touches[1].clientY;
      initialPinchDistance = Math.sqrt(dx * dx + dy * dy);
      event.preventDefault();
      return;
    }
    
    if (event.touches.length === 1) {
      const touch = event.touches[0];
      
      // タッチ位置をマウス座標に変換
      mouse.x = (touch.clientX / window.innerWidth) * 2 - 1;
      mouse.y = -(touch.clientY / window.innerHeight) * 2 + 1;
      
      raycaster.setFromCamera(mouse, camera);
      
      // FBXモデルの場合、子要素を含めてインターセクト検出
      let intersects = [];
      if (ringMesh.traverse) {
        const meshes = [];
        ringMesh.traverse(function(child) {
          if (child.isMesh) {
            meshes.push(child);
          }
        });
        intersects = raycaster.intersectObjects(meshes);
      } else {
        intersects = raycaster.intersectObject(ringMesh);
      }
      
      if (intersects.length > 0) {
        isDragging = true;
        canvasElement.classList.add('rotating');
        
        previousMousePosition.x = touch.clientX;
        previousMousePosition.y = touch.clientY;
        
        event.preventDefault();
      }
    }
  } catch (error) {
    log(1, 'タッチスタート処理エラー', error);
  }
}

// タッチ移動時の処理 (ピンチズーム強化版)
function onTouchMove(event) {
  try {
    // ピンチ操作（ズーム）
    if (event.touches.length === 2) {
      event.preventDefault();
      
      // 現在の2本指の距離を計算
      const dx = event.touches[0].clientX - event.touches[1].clientX;
      const dy = event.touches[0].clientY - event.touches[1].clientY;
      const currentDistance = Math.sqrt(dx * dx + dy * dy);
      
      // 距離の変化を計算
      const pinchDelta = currentDistance - initialPinchDistance;
      const zoomSpeed = 0.5;
      
      // より滑らかなズーム処理
      gsap.to(camera.position, {
        z: Math.max(50, Math.min(200, camera.position.z - pinchDelta * zoomSpeed)),
        duration: 0.2,
        ease: 'power1.out'
      });
      
      // 次の比較のために現在の距離を保存
      initialPinchDistance = currentDistance;
      return;
    }
    
    if (isDragging && ringMesh && event.touches.length === 1) {
      event.preventDefault();
      
      const touch = event.touches[0];
      const deltaX = touch.clientX - previousMousePosition.x;
      const deltaY = touch.clientY - previousMousePosition.y;
      
      // 回転速度調整
      const rotationSpeed = 0.01;
      
      // モデルタイプに応じた回転処理 (マイナス記号を外して正しい方向に回転するよう修正)
      if (ringMesh.traverse) {
        // FBXモデルの場合、回転軸を調整
        ringMesh.rotation.z += deltaX * rotationSpeed; // マイナス記号を外す
        ringMesh.rotation.x += deltaY * rotationSpeed; // 上下は同じ
      } else {
        // STLモデルの場合
        ringMesh.rotation.y += deltaX * rotationSpeed; // マイナス記号を外す
        ringMesh.rotation.x += deltaY * rotationSpeed; // 上下は同じ
      }
      
      // タッチ位置を更新
      previousMousePosition.x = touch.clientX;
      previousMousePosition.y = touch.clientY;
    }
  } catch (error) {
    log(1, 'タッチムーブ処理エラー', error);
  }
}

function onTouchEnd() {
  try {
    if (isDragging) {
      isDragging = false;
      canvasElement.classList.remove('rotating');
    }
  } catch (error) {
    log(1, 'タッチエンド処理エラー', error);
  }
}

function onResize() {
  try {
    // レスポンシブな値を再取得
    const responsiveValues = getResponsiveValues();
    RING_HEIGHT = responsiveValues.RING_HEIGHT;
    CAMERA_HEIGHT = responsiveValues.CAMERA_HEIGHT;
    CAMERA_DISTANCE = responsiveValues.CAMERA_DISTANCE;
    
    // カメラ設定を更新
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    
    // リサイズ時にカメラ位置も更新
camera.position.y = CAMERA_HEIGHT * 2.5;
camera.position.z = 0; // Z位置も更新
camera.lookAt(0, RING_HEIGHT, 0);
    
    // リングの位置も更新（もし存在すれば）
    if (ringMesh) {
      ringMesh.position.y = RING_HEIGHT;
    }
    
    if (renderer && composer) {
      renderer.setSize(window.innerWidth, window.innerHeight);
      composer.setSize(window.innerWidth, window.innerHeight);
    }
  } catch (error) {
    log(1, 'リサイズ処理エラー', error);
  }
}

// script.js - パート8: アニメーションループと初期化
function animate() {
  try {
    requestAnimationFrame(animate);
    
    // レンダリング
    if (composer) {
      composer.render();
    }
  } catch (error) {
    log(1, 'アニメーション処理エラー', error);
  }
}

// 初期化とエラーハンドリング
document.addEventListener('DOMContentLoaded', function() {
  try {
    // GSAPのインポートチェック
    if (typeof gsap === 'undefined') {
      console.warn('GSAPが読み込まれていません。アニメーション効果が制限されます。');
      // フォールバックとしての簡易GSAP互換オブジェクト
      window.gsap = {
        to: function(target, params) {
          if (params.duration && params.onUpdate) {
            const steps = Math.ceil(params.duration * 60); // 60fps想定
            const interval = params.duration * 1000 / steps;
            let step = 0;
            
            const timer = setInterval(function() {
              step++;
              if (step >= steps) {
                clearInterval(timer);
                // 最終値を設定
                for (const key in params) {
                  if (key !== 'duration' && key !== 'ease' && key !== 'onUpdate') {
                    target[key] = params[key];
                  }
                }
                params.onUpdate && params.onUpdate();
              } else {
                // 線形補間で値を更新
                const progress = step / steps;
                for (const key in params) {
                  if (key !== 'duration' && key !== 'ease' && key !== 'onUpdate') {
                    target[key] += (params[key] - target[key]) / (steps - step + 1);
                  }
                }
                params.onUpdate && params.onUpdate();
              }
            }, interval);
          } else {
            // 単純に値を設定
            for (const key in params) {
              if (key !== 'duration' && key !== 'ease') {
                target[key] = params[key];
              }
            }
          }
        },
        from: function(target, params) {
          // fromの実装（非常に簡易的）
          const originalValues = {};
          for (const key in params) {
            if (key !== 'duration' && key !== 'ease') {
              originalValues[key] = target[key];
              target[key] = params[key];
            }
          }
          this.to(target, { ...params, ...originalValues });
        }
      };
    }
    
    init();
    animate();
    
    // 最終フォールバックとして、20秒後にもまだロード中なら強制的にプレースホルダーを表示
    setTimeout(function() {
      if (document.querySelector('.loading-screen') && 
          !document.querySelector('.loading-screen.hidden')) {
        log(1, "モデル読み込みタイムアウト、プレースホルダーを強制表示");
        hideLoading();
        createPlaceholderRing();
      }
    }, 20000);
    
  } catch (error) {
    log(1, "初期化エラー:", error);
    hideLoading();
    
    // フォールバック - エラーメッセージをユーザーに表示
    const errorMsg = document.createElement('div');
    errorMsg.style.position = 'fixed';
    errorMsg.style.top = '50%';
    errorMsg.style.left = '50%';
    errorMsg.style.transform = 'translate(-50%, -50%)';
    errorMsg.style.backgroundColor = 'rgba(255,255,255,0.9)';
    errorMsg.style.padding = '20px';
    errorMsg.style.borderRadius = '10px';
    errorMsg.style.boxShadow = '0 4px 20px rgba(0,0,0,0.1)';
    errorMsg.style.zIndex = '1000';
    errorMsg.textContent = '表示に問題が発生しました。ブラウザをリロードしてください。';
    document.body.appendChild(errorMsg);
  }
});

// GSAP用のインポートチェック
if (typeof gsap === 'undefined') {
  console.warn('GSAPを読み込んでください: https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.3/gsap.min.js');
}
